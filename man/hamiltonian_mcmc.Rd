% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hmc.R
\name{hamiltonian_mcmc}
\alias{hamiltonian_mcmc}
\title{Sample using hamiltonian MCMC}
\usage{
hamiltonian_mcmc(
  initial_state,
  num_samples,
  step_size,
  num_steps,
  density_function,
  gradient_function,
  M,
  adaptive_mode = FALSE,
  adaptive_target_acceptance = 0.85
)
}
\arguments{
\item{initial_state}{A vector with length \eqn{d}, representing the initial state.}

\item{num_samples}{Number of samples to generate.}

\item{step_size}{How large is the step size in the leapfrof integration.}

\item{num_steps}{Number of leap frog steps. If Adaptive Mode is enabled, this represents the initial value.}

\item{density_function}{A function representing the target density to sample from. The function should take a single vector valued parameter of length \eqn{d}.}

\item{gradient_function}{A function representing the gradient of the density function. The function should take a single vector valued parameter of length \eqn{d}.}

\item{M}{The mass matrix for sampling momenta. Can be passed as either a full \eqn{d \times d} matrix or as a vector of length \eqn{d}, interpreted as the diagnoal of the mass matrix}

\item{adaptive_mode}{Boolean to indicate whether the step size should be dynamic based on a target acceptance rate. FALSE by default.}

\item{adaptive_target_acceptance}{If adaptive mode is enabled, this sets the target acceptance rate. Default = \eqn{0.85}}
}
\value{
Returns a matrix of samples.
}
\description{
Sample using hamiltonian MCMC
}
\examples{
# Function to calculate the negative log likelihood (up to a constant)
negative_log_likelihood <- function(x, mean, covariance) {
 k <- length(mean)
 det_cov <- det(covariance)
 stopifnot("Covariance matrix must be positive definite."= det_cov > 0)

 constant <- -0.5 * (k * log(2 * pi) + log(det_cov))
 exponent <- 0.5 * t(x - mean) \%*\% solve(covariance) \%*\% (x - mean)
 log_likelihood <- constant + exponent

 return(log_likelihood)
}

# Function to calculate the gradient of the negative log likelihood
gradient_negative_log_likelihood <- function(x, mean, covariance) {
 k <- length(mean)
 det_cov <- det(covariance)
 stopifnot("Covariance matrix must be positive definite."= det_cov > 0)

 gradient <- -solve(covariance) \%*\% (x - mean)

 return(gradient)
}

set.seed(123)
mean_vector <- c(2, -2)
covariance_matrix <- matrix(c(1, 0.98, 0.98, 2), nrow = 2, ncol = 2)
num_samples <- 1000
initial_state <- c(0, 0)
step_size <- 0.05
num_steps <- 30
# Define the multivariate normal density and gradient functions
density_function <- function(x) -negative_log_likelihood(x, mean_vector, covariance_matrix)
gradient_function <- function(x) -gradient_negative_log_likelihood(x, mean_vector, covariance_matrix)
samples <- hamiltonian_mcmc(initial_state, num_samples,
                           step_size, num_steps,
                           density_function, gradient_function,
                           M=c(1, 1))
plot(samples[,1])
}
